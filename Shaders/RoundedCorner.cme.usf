
float2 iResolution;
float UvSpaceEdge;
float UvSpaceCorner;
float IgnoreAspectRatio;
float Rotate;
float4 CornersIn;
float EdgeSize;
float4 EdgeColor;
float4 FillColor;

float4 main(float2 uv : TEXCOORD0) : SV_Target
{
#include "cme/math/common.mh"
#include "cme/math/rotate.mh" rot;
#include "cme/df/RoundedCorner.mh" rc;

    float2 resol = lerp(iResolution, vmin2(iResolution), IgnoreAspectRatio);

    float cornerMul = lerp(1, vmin2(resol) * 0.5, UvSpaceCorner);
    float2 P = (uv-0.5) * resol;
    rc.Corners = CornersIn * cornerMul;
    rc.Size = resol * 0.5 - 1;

    float rcdf = rc.Df(P);

    // check the difference between actual and reported resolution
    float aaTerm = length(1/iResolution) / length(pixelsize(uv));
    float edgeThr = EdgeSize * lerp(1, vmin2(resol), UvSpaceEdge);

    float inside = saturate(0.5 - (edgeThr + rcdf) * aaTerm);
    float body = saturate(0.5 - rcdf * aaTerm);
    
    float4 col = edgeThr > 0.1 ?
        lerp(EdgeColor, FillColor, inside) :
        FillColor;
    
    col.a = min(col.a, body);
    return col;
}